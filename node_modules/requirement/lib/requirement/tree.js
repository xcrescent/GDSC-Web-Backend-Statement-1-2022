// Generated by CoffeeScript 1.9.3
(function() {
  var fs, path;

  fs = require("fs");

  path = require("path");

  module.exports = (function() {
    function _Class(arg) {
      var dir, name, onTree, tree;
      dir = arg.dir, onTree = arg.onTree;
      name = this.classify(path.basename(dir));
      tree = {};
      tree[name] = this.buildTree({
        dir: dir,
        onTree: onTree
      });
      if (onTree) {
        onTree({
          name: name,
          tree: tree,
          fpath: dir
        });
      }
    }

    _Class.prototype.buildTree = function(arg) {
      var dir, files, forbidden, onTree, tree, used_names;
      dir = arg.dir, onTree = arg.onTree, used_names = arg.used_names;
      dir = path.resolve(dir);
      forbidden = ['.json', '.node'];
      used_names || (used_names = []);
      tree = {};
      files = fs.readdirSync(dir);
      files.forEach((function(_this) {
        return function(file) {
          var child, ext, fpath, name, names, rpath, used;
          ext = path.extname(file);
          name = path.basename(file, ext);
          fpath = path.join(dir, file);
          rpath = path.join(dir, name);
          used = used_names.slice();
          if (fs.lstatSync(fpath).isDirectory()) {
            file = _this.classify(file);
            used.push(file);
            tree[file] = _this.buildTree({
              dir: fpath,
              used_names: used,
              onTree: onTree
            });
            if (onTree) {
              onTree({
                name: file,
                tree: tree,
                fpath: fpath
              });
            }
            return;
          }
          if (forbidden.indexOf(ext) >= 0 || !(ext in require.extensions) || name === 'index') {
            return;
          }
          name = _this.classify(name);
          names = name.split(".");
          child = tree;
          return names.forEach(function(name, i) {
            var ignore, last, req;
            ignore = used.indexOf(name) > -1;
            last = names.length - 1 === i;
            req = rpath;
            if (last && ignore) {
              return tree = req;
            } else if (last) {
              return child[name] = req;
            } else if (ignore) {

            } else {
              child[name] || (child[name] = {});
              return child = child[name];
            }
          });
        };
      })(this));
      return tree;
    };

    _Class.prototype.classify = function(string) {
      var regex;
      regex = /^[a-z]|[_\.][a-z]/g;
      return string.replace(regex, function(match) {
        return match.toUpperCase().replace(/_/, "");
      });
    };

    return _Class;

  })();

}).call(this);
